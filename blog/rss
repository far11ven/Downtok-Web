<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:media="http://search.yahoo.com/mrss/"><channel><title><![CDATA[blog.kushalbhalaik.xyz]]></title><description><![CDATA[Thoughts, stories and ideas.]]></description><link>https://blog.kushalbhalaik.xyz/</link><image><url>https://blog.kushalbhalaik.xyz/favicon.png</url><title>blog.kushalbhalaik.xyz</title><link>https://blog.kushalbhalaik.xyz/</link></image><generator>Ghost 2.9</generator><lastBuildDate>Thu, 30 Apr 2020 11:18:12 GMT</lastBuildDate><atom:link href="https://blog.kushalbhalaik.xyz/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA["The English Game" Netflix TV series - Review]]></title><description><![CDATA[Based on true events, this 19th century drama follows two footballers on opposite sides of a class divide who changed the game - and England - forever]]></description><link>https://admin.kushalbhalaik.xyz/the-english-game-review/</link><guid isPermaLink="false">Ghost__Post__5e777078251b95000153dcdf</guid><category><![CDATA[Tv-Series]]></category><category><![CDATA[Review]]></category><dc:creator><![CDATA[Kushal Bhalaik]]></dc:creator><pubDate>Sun, 22 Mar 2020 21:41:29 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/03/englsh-game---front.png" medium="image"/><content:encoded><![CDATA[<!--kg-card-begin: html--><!DOCTYPE html>
<html>
<head>
<!-- Font Awesome Icon Library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/js/fontawesome.min.js"/>
<style>
.checked {
  color: orange;
}
</style>
</head>
<body>
<i class="far fa-star checked" style="color: orange;"/>
<i class="far fa-star checked" style="color: orange;"/>
<i class="far fa-star checked" style="color: orange;"/>
<i class="far fa-star checked" style="color: orange;"/>
<i class="far fa-star-half checked" style="color: orange;"/>
</body>
</html><!--kg-card-end: html--><blockquote>From "Downton Abbey" creator and "Gosford Park" writer <a href="https://www.google.com/search?q=Julian+Fellowes">Julian Fellowes</a>. Based on true events, this 19th century drama follows two footballers on opposite sides of a class divide who changed the game - and England - forever.<br><strong>- metro.co.uk</strong></br></blockquote><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/03/the-english-game-s1.jpg" class="kg-image" alt=""The English Game" Netflix TV series - Review"><figcaption>"The English Game" poster</figcaption></img></figure><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/03/englsh-game---front.png" alt=""The English Game" Netflix TV series - Review"/><p><strong>I</strong> just saw Netflix notification for <strong><em>The English Game</em></strong> TV mini-series yesterday, by the time I was having lunch I was into second episode. It's a nicely spun historic sports drama based on two footballers striving to shape football for the better while struggling in their own personal lives. The English Game keeps you hooked to your seat with its mild cliff-hangers knowing it only contains 6 episodes which is like an extra long movie.</p><p>Based on the lives of footballers <em><strong><a href="https://en.wikipedia.org/wiki/Fergus_Suter">Fergus "Fergie" Suter</a></strong> </em>and <strong><a href="https://en.wikipedia.org/wiki/Arthur_Kinnaird,_11th_Lord_Kinnaird"><em>Arthur Kinnaird</em></a>, </strong>rivals in football teams <a href="https://en.wikipedia.org/wiki/Darwen_F.C."><strong><em>Darwen FC</em></strong></a> &amp; <a href="https://www.google.com/search?rlz=1C1GCEU_enIN854IN854&amp;sxsrf=ALeKk03I6kQ9IQGTTFoG8gmSRATiC3us5w:1584910619374&amp;q=Old+Etonians&amp;spell=1&amp;sa=X&amp;ved=2ahUKEwigud-T_K7oAhXFe30KHdteCmIQkeECKAB6BAgaECc"><strong><em>Old Etonians</em></strong></a><strong><em>; </em></strong><em>how they struggle to keep playing in the FA Cup amid troubles in their own personal lives.</em></p><h2 id="synopsis">Synopsis</h2><p> <strong><em>Suter </em></strong>comes from a working class family where his father is a recurring alcoholic with the history of violence. He comes from Scottish football club "Partick" at the behest of Mr. Welsh who is offers to pay him better (later he joins another FC <strong>Blackburn </strong>for even better compensation to provide for his family, for which he even faces backlash from everybody from the old teammates to the common folk), who is an owner at a cotton mill in Darwen and is responsible for Darwen F.C.. Suter brings his best friend Jimmy Love along with him to play for Darwen F.C.</p><p><strong><a href="https://en.wikipedia.org/wiki/Arthur_Kinnaird,_11th_Lord_Kinnaird"><em>Arthur Kinnaird</em></a><em> </em></strong><em>comes from a wealthy banking family and is a founding member of the Old Etonians F.C.. His personal life is a mess, as his wife recently lost their child and his father doesn't approve of his greater affection for the game. He is struggling to strike a balance between being a good husband to his wife and being a football player, and also to deal with his father.</em></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/03/englsh-game.png" class="kg-image" alt=""The English Game" Netflix TV series - Review"><figcaption>A still from "The English Game"</figcaption></img></figure><p>Both characters have daddy issues, but are motivated to do good by their families and their love for football. Both leads their respective teams and have to deal with their team mates who don't always support their actions. Despite these challenges they are trying their hard to keep all the pots stirring. Suter has his eyes on winning FA Cup for his team (which consists of some professional and working men), Football Association controlled by "gentlemen" frown upon this i.e. the professional players who play football for money to keep the stature of game.</p><p>This leads to banning Blackburn F.C. from the FA Cup final against OLD Etonians, but after some staunch opposition from <em>Mr. Kinnaird and Lancashire Football Association </em>they are ultimately allowed to play.</p><h2 id="the-verdict">The Verdict</h2><p> <strong><em>The </em></strong><em>thing which</em> I like most, how this whole series connects everyone to Football (which is what the original motive would have been), main characters and everybody around them is somehow committed to the GAME and that includes the common people of Darwen and Blackburn. Every character is created beautifully, which you could say are essential to the being of this series. Though it is a historic piece, it doesn't involve anything which is unrelated to the football scene of the time. The actors playing Suter and <em>Kinnaird </em>have done full justice to their respective characters.<br>Even after all these discerning facts about this TV show, the only thing which somewhat bothered me the fast pace of this series, which would have been unnoticeable if it were a movie, but the sad fact is it's a TV show and it would have even elevated the whole watching experience of the show.<br><br>All in all, this TV series is a very well executed work and I recommend watching it for everyone, who loves the GAME or who are just looking for something to watch on their weekend.</br></br></br></p><p><strong><strong>Original article on:</strong> </strong><a href="https://blog.kushalbhalaik.xyz/the-english-game-review/">https://blog.kushalbhalaik.xyz/the-english-game-review/</a></p>]]></content:encoded></item><item><title><![CDATA[Allthestreams.fm - a necessary evil?]]></title><description><![CDATA[My first reaction was, twas' gonna happen one day. I came to know about this website via a college WhatsApp group and I didn't even bother to take a look thinking of which as another]]></description><link>https://admin.kushalbhalaik.xyz/allthestreams-fm-a-new/</link><guid isPermaLink="false">Ghost__Post__5e6932c6d0c35a000177b347</guid><dc:creator><![CDATA[Kushal Bhalaik]]></dc:creator><pubDate>Wed, 11 Mar 2020 19:03:09 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/03/allthe.png" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/03/allthe.png" alt="Allthestreams.fm - a necessary evil?"/><p>Allthestreams.fm is a brain-child of <a href="https://mschf.xyz/">MSCHF</a>. Let's begin with this excerpt <a href="https://allthestreams.fm/">their </a>manifesto:</p><blockquote><br>Netflix has all the Netflix stuff, Disney has all the Disney stuff, and never the twain shall meet. Let’s change that, however briefly.<br>Whenever media becomes inaccessible, piracy thrives again - from the 1960’s BBC 1-hour limit on pop music, to the iTunes store mp3 tyranny of the 00s. Today, All The Streams comes in response to the fragmentation and walled-garden paradigm that has risen to prominence for online video streaming services.</br></br></blockquote><p><strong>Allthestreams.fm</strong> has subscriptions to 6 major video content streaming providers in the USA. User can just tune into one of the streaming channel and <strong>Allthestreams.fm</strong> just shows you their curated media playlists across different channels, just like old fashioned radio by leveraging the scales of a radio.</p><p/><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/03/sticker-with-shadow.png" class="kg-image" alt="Allthestreams.fm - a necessary evil?"><figcaption><a href="https://allthestreams.fm/">allthestreams.fm</a> logo from their website</figcaption></img></figure><p>My first reaction was, twas' gonna happen one day. I came to know about this website via a college WhatsApp group and I didn't even bother to take a look thinking of which as another pirating website. This perception was changed when I went through TNW's article and I FINALLY gave it a try.</p><hr><p><a href="/allthestreams-fm-a-new/allthestreams.fm">What </a>I thought to be a serious solution to a problem which we are facing or will face most fiercely on the <a href="https://www.theverge.com/2020/3/10/21172214/streaming-piracy-all-streams-netflix-disney-hbo-hulu-amazon">outbreak of 2021</a>, let's take a look.</p><h2 id="where-we-at-w-r-t-streaming-services">Where we at w.r.t. streaming services?</h2><p>US has prominent video streaming services, such as Netflix, Hulu, Amazon Prime Video, Disney+ and a dozen more. As per <a href="https://www.statista.com/statistics/325645/usa-number-of-internet-users/">Statista</a> US has close to 293 million internet users consuming one or other such services. While in <a href="https://www.statista.com/statistics/255146/number-of-internet-users-in-india/">India</a> internet users are almost double, which are majorly hooked to Netflix, Amazon Prime Video and other local player such as Hotstar, Zee5, ALT etc.<br><br>With this growing number of people ready to scavenge internet for content, currently has 1 or 2 subscriptions on an average. With this growing number vast Media Publishing houses, who used to have their majority of content listed with niche player such as Netflix or Hulu wants a bigger piece of pie for themselves.<br>We already know "Friends" is gonna be leaving Netflix by start of 2021. So all the popular franchises will be ultimately going to their respective owner's streaming platform. Where does that leave us, the end users (scavengers)?</br></br></br></p><h2 id="allthestreams-fm-to-the-rescue">allthestreams.fm to the rescue?</h2><p>Not quite. My initial thought was this is gonna be a service where user just buys one subscription and then can choose to watch from all these streaming platforms, based on user interest (quite a business idea, right? just like old fashioned cable TV)</p><blockquote><br>All The Streams doesn’t care about user-utility, it doesn’t care about scalability - and it certainly doesn’t care about terms of service! All The Streams is made to revel in platform independence, and to demonstrate how even the most lo-fi hacks can be the equal of giants.</br></blockquote><h2 id="my-thoughts-">My thoughts:</h2><p>Last night I tried it on my PC, streaming was terrible, so many delays, video quality - not there, no video player options <strong>— just a crafty lil website</strong>.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/03/Capture123123.PNG" class="kg-image" alt="Allthestreams.fm - a necessary evil?"><figcaption>FBI Notice on streaming channels</figcaption></img></figure><p>Since I started writing this article last midnight, by the time I'm about to finish, I can see FBI notices flashing over the streaming channel feeds (as it isn't legal per se).<br><br>But I love the idea, what it represents.🏴‍☠️</br></br></p><blockquote><br>At a time where “up next” tends to be hot algorithmic garbage, pirate radio offers up the idiosyncracy of human decision across an unrestricted breadth of choice. We’re going to play anything and everything we feel like. We’re going to make a frankensteinian playlist of media that none of these streaming platforms could ever recommend to you because it would cost them the profits of their exclusively-owned content. Sit back and enjoy the ride: like all pirate media offerings, we’re doing this for you.<br><em><strong>- allthestreams.fm manifesto</strong></em></br></br></blockquote><p/><p><strong><strong>Original article on:</strong> </strong><a href="https://blog.kushalbhalaik.xyz/allthestreams-fm-a-new/" rel="noopener nofollow">https://blog.kushalbhalaik.xyz/allthestreams-fm-a-new/</a></p></hr>]]></content:encoded></item><item><title><![CDATA[Getting started with Deno]]></title><description><![CDATA[Deno is a secure runtime for Javascript & Typescript (right out of the box) just like Nodejs is a runtime for Javascript. Deno was created by same guy who created Nodejs i.e. Ryan Dahl]]></description><link>https://admin.kushalbhalaik.xyz/getting-started-with-deno/</link><guid isPermaLink="false">Ghost__Post__5e47e4121f0c8f0001d72ee3</guid><category><![CDATA[Deno]]></category><dc:creator><![CDATA[Kushal Bhalaik]]></dc:creator><pubDate>Sat, 15 Feb 2020 13:46:20 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/Deno1-1.PNG" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/Deno1-1.PNG" alt="Getting started with Deno"/><p>In this article, I'm going to show you how to get started with <a href="https://deno.land/">Deno </a>- A secure runtime for JavaScript and TypeScript. We'll see Installation of Deno, Hello World program and setting up an http-server.</p><hr><h2 id="the-what">The What?</h2><p><br><a href="https://deno.land/">Deno </a>is a secure runtime for Javascript &amp; Typescript (right out of the box) just like Nodejs is a runtime for Javascript. Deno was created by same guy who created Nodejs i.e. Ryan Dahl.<br/></br></p><p>Deno aims to improve what Ryan Dahl thinks he should've done with Nodejs like:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/image.png" class="kg-image" alt="Getting started with Deno"><figcaption>Deno aims to improve what's wrong with Nodejs</figcaption></img></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/image-1.png" class="kg-image" alt="Getting started with Deno"><figcaption>Things Deno offers out of the box</figcaption></img></figure><h2 id="installing-deno-">Installing Deno.<br/></h2><p>There are few options available on official site <a href="https://deno.land/">deno.land/</a>.</p><p>We are gonna install it using Power-shell command:</p><pre><code>iwr https://deno.land/x/install/install.ps1 -useb | iex</code></pre><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/image-2.png" class="kg-image" alt="Getting started with Deno"><figcaption>Message after Deno is successfully installed</figcaption></img></figure><p>The Deno.exe  executable file is stored in <em>C:\Users\&lt;username&gt;\.deno\bin\deno.exe</em> by default.</p><blockquote><br>In macOS or Linux <em>$HOME/.local/bin</em></br></blockquote><p><br>Following command will give info about Deno, V8 Engine &amp; Typescript version installed on your machine.</br></p><pre><code>deno --version</code></pre><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/image-4.png" class="kg-image" alt="Getting started with Deno"><figcaption>Deno versions</figcaption></img></figure><h2 id="hello-world-writing-first-program-with-deno-">Hello World - Writing first program with Deno.<br/></h2><p>Open up your terminal and just type following:</p><pre><code>deno https://deno.land/std/examples/welcome.ts</code></pre><p>will result into:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/image-5.png" class="kg-image" alt="Getting started with Deno"><figcaption>Executing a remote .ts file</figcaption></img></figure><p>What happened here is we execute a code present in a remote file, AWESOME!!</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/image-8.png" class="kg-image" alt="Getting started with Deno"><figcaption>Content of https://deno.land/std/examples/welcome.ts</figcaption></img></figure><p>Now let's execute a local code:<br><br>Create a file inside "C:\deno" &gt; index.ts (it could have .js extension for a javascript file)</br></br></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/image-11.png" class="kg-image" alt="Getting started with Deno"><figcaption>Opening index.ts in Visual Studio Code</figcaption></img></figure><p>Now using terminal execute following command:</p><pre><code>deno index.ts

or

deno index.js</code></pre><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/image-13.png" class="kg-image" alt="Getting started with Deno"><figcaption>Hello World!! with index.ts</figcaption></img></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/image-14.png" class="kg-image" alt="Getting started with Deno"><figcaption>Hello World!! with index.js</figcaption></img></figure><h2 id="setting-up-an-http-server-">Setting up an http-server.</h2><p>Deno provides an http-server i.e. </p><pre><code>https://deno.land/std@v0.30.0/http/server.ts</code></pre><p>As provided on official website example, here's how you can create a running server on your machine:<br><br><strong>Code:</strong></br></br></p><pre><code>import { serve } from "https://deno.land/std@v0.30.0/http/server.ts";

const s = serve({ port: 5000 });

console.log("Listening on http://localhost:5000/");

for await (const req of s) {
  req.respond({ body: "Hello World!!" });
}
</code></pre><p>just copy paste above code into your <em><strong>"index.ts"</strong></em> file and run it with following command.</p><pre><code>deno -A index.ts</code></pre><blockquote>-A flag provides all the necessary permission for your app to run on your machine</blockquote><p/><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/image-15.png" class="kg-image" alt="Getting started with Deno"><figcaption>GET request on server running on localhost:5000</figcaption></img></figure><h3 id="using-oak-middle-ware-with-deno-http-server-">Using Oak middle-ware with deno http-server.<br/></h3><p>Oak is a middleware framework for Deno's net server, more on this can be found on GitHub repo: <a href="https://github.com/oakserver/oak">https://github.com/oakserver/oak</a><br/></p><p>NOW let's create a GET &amp; POST endpoint by altering our <em><strong>"index.ts"</strong></em> code with following:</p><figure class="kg-card kg-code-card"><pre><code>import { Application, Router } from "https://deno.land/x/oak/mod.ts";

const router = new Router();

router.get("/", context =&gt; {
  context.response.body = "Hello World!";
});

router.post("/", context =&gt; {
  context.response.body = "You have made a POST request!";
});

const app = new Application();

app.use(router.routes());
app.use(router.allowedMethods());

const server = app.listen({ port: 5000 });

console.log("Listening on http://localhost:5000/");</code></pre><figcaption>Here we are spinning of an http server with Oak</figcaption></figure><p><strong>Result:</strong></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/image-15.png" class="kg-image" alt="Getting started with Deno"><figcaption>GET request on server running on localhost:5000</figcaption></img></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/02/image-16.png" class="kg-image" alt="Getting started with Deno"><figcaption>POST request on server running on localhost:5000</figcaption></img></figure><p>So, that was it regarding installing Deno, writing first 'Hello-World" program and setting up an http-server along with Oak middleware.<br><br><br><strong>Resources: </strong><br>Deno – a better Node.js? | Krzysztof Piechowicz : <a href="https://www.youtube.com/watch?v=mzfw9TwBiQc&amp;t=616s">https://www.youtube.com/watch?v=mzfw9TwBiQc&amp;t=616s</a><br><br>Deno Examples: <a href="https://deno.land/#example">https://deno.land/#example</a><br><br>Oak Middleware: <a href="https://github.com/oakserver/oak">https://github.com/oakserver/oak</a><br><br><br><strong>Original article on</strong>: https://blog.kushalbhalaik.xyz/getting-started-with-deno/<br/></br></br></br></br></br></br></br></br></br></br></br></p></hr>]]></content:encoded></item><item><title><![CDATA[GitHub Pages — A Comprehensive guide w/ images (Part 2)]]></title><description><![CDATA[Recently I started building my personal website as everyone is building one for themselves these days. I got a cool TLD (.xyz), and that is]]></description><link>https://admin.kushalbhalaik.xyz/github-pages-a-comprehensive-guide-w-images-part-2/</link><guid isPermaLink="false">Ghost__Post__5e22bdec47638e0001d8298a</guid><category><![CDATA[GitHub]]></category><dc:creator><![CDATA[Kushal Bhalaik]]></dc:creator><pubDate>Sun, 12 Jan 2020 08:10:00 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/01/4.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/01/4.jpg" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"/><p>This is part 2 of the article series <a href="https://blog.kushalbhalaik.xyz/github-pages-a-comprehensive-guide-w-images-part-1">GitHub Pages — A Comprehensive guide w/ images</a></p><p>Recently I started building my personal <a href="https://kushalbhalaik.xyz/">website</a> as everyone is building one for themselves these days. I got a cool TLD (.xyz), and that is the only money I wanted to spend. Since then I’ve been looking for ways to host it without any costs.</p><hr><p>In <a href="https://blog.kushalbhalaik.xyz/github-pages-a-comprehensive-guide-w-images-part-1">part 1</a> of this series we saw how to publish GitHub User Pages and how to link it with custom-domain.In this article we’ll see how to have more than one Github Pages per account (Yes, it is possible). <em>Commençons!!</em></p><blockquote><em><em>Before proceeding make sure you already have a repository &lt;your_username&gt;.github.io</em></em></blockquote><h1 id="setting-up-multiple-github-pages-">Setting up Multiple Github Pages:</h1><p>Let’s create a new repository:</p><ol><li>Goto <a href="http://www.github.new/">Github.new</a> and fill out the new repository details, I’ll call it <em>“<strong>demo</strong>”</em>:</li></ol><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/1782/1*PzfpUhBsr5iJi5Q7QRK7Nw.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>Repository creation flow on GitHub</figcaption></img></figure><h3 id="note-it-is-important-to-keep-this-repository-public"><em>Note: It is important to keep this repository public</em></h3><p>2. Now goto repository settings:</p><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/2030/1*b5bPuFazwfRwghdXnAVjIg.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"/></figure><p>3. On Settings page, scroll down to <strong>Github Pages</strong> section:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/2096/1*8yAgZCpugVwjaXM4eKXn7w.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>GitHub Repo Settings Page</figcaption></img></figure><p>4. Make the repository Public, if you see following message:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/2474/1*ylp1_d_vkORpLPyClx_JAA.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>Making Repository Public on GitHub</figcaption></img></figure><p>5. Once repository is Public <strong><em>GitHub Pages</em></strong> will become enabled for the current repository</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/2030/1*8Y6mLRtnTRzIe3WmzTmgPA.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>GitHub Pages options</figcaption></img></figure><p>6. Click on <strong>None</strong>, then view current options: we can either choose following options:</p><ol><li>Using “master” branch of demo repository for publishing GitHub pages (Like in GitHub <strong>User Pages</strong>)</li><li>Using /docs page under “master” branch for publishing GitHub Pages</li><li>We’ll be using <strong>gh-pages</strong> branch option which is currently not available as <strong>gh-pages </strong>branch doesn’t exist for <strong><em>demo </em></strong>repository as of yet</li></ol><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/1672/1*Ck5_flCgHvQ1dc2GpbeRSQ.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>By default None is selected for GitHub Pages</figcaption></img></figure><p>7. Copy the <strong><em>demo </em></strong>repository link:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/2160/1*MYtVHN0W5VgMej0DXKA9fg.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>Copying repository link from GitHub</figcaption></img></figure><p>8. Now clone the repo to local machine: Here, <strong><a href="unsafe:javascript:void(0)">&lt;far11ven&gt;</a> is my GitHub username</strong></p><pre><code>~$ git clone https://github.com/far11ven/demo.git</code></pre><p>9. Create local <strong>gh-pages </strong>branch and push it to GitHub:</p><pre><code>~$ cd demo
~$ git branch gh-pages
~$ git push remote -u origin gh-pages</code></pre><p>10. Go back to <strong><em>demo </em></strong>settings on GitHub and select <strong>gh-pages</strong> as source for publishing:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/1698/1*weFkH-xTZ-jYPsMeEfqbFA.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>Selecting gh-pages branch</figcaption></img></figure><p>After this step whatever you put in <strong>gh-pages</strong> branch will be automatically published.</p><p>11. Let’s create a simple <strong>index.html</strong> file within this repository:</p><pre><code>~$ echo "Hello gh-pages!!" &gt; index.html</code></pre><p>12. Add, commit and push your changes to GithHub remote:</p><p>13. You can see in your browser <strong>demo </strong>repository has been published</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/1302/1*WhTtLYp5oPJm8ye_b5jglg.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>“demo” page published under GitHub User page</figcaption></img></figure><blockquote>You will have a main GitHub User Page (One per account) <strong><em><strong>&lt;username&gt;</strong></em>.github.io</strong> and all other repos will be published as sub pages<br><br>or,<br><br>if you have already linked a custom-domain to your GitHub User Page, the n you can see the published page at <strong>www.example.com<em><strong>/&lt;your-repo-name&gt;</strong> </em></strong>in my case <strong>demo </strong>repo will be published at <strong>far11ven.github.io/demo</strong></br></br></br></br></blockquote><h1 id="setting-up-custom-domains-">Setting up custom-domains:<br/></h1><h3 id="i-setting-up-github-pages-as-a-domain">i) Setting up Github Pages as a domain</h3><p>To have our subpages be listed as demo page we need to do following changes in our GitHub repo and our Domain provider</p><ol><li>Create a <strong>CNAME </strong>file in your repository: I will be doing it via GitHub UI, just create a <strong>CNAME </strong>file (with no extension) and just enter your sub-domain name inside it, nothing else. in my case, I want to make <strong>demo </strong>pages appear as <strong><em>your-website.com</em></strong></li></ol><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/2618/1*gEHiZyGl4ahG1Pzof-Q99A.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>CNAME File content</figcaption></img></figure><p>Once Done, commit your changes.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/2032/0*YoWI7xR6nMUVX4gz.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>Adding CNAME to repository</figcaption></img></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/2184/1*H59ALuDL9jcNg5o9Ll7z1A.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>After Adding CNAME to repo</figcaption></img></figure><p>2.  Add a new DNS record on your DNS provider: We need to change existing CNAME records to point to created GitHub pages i.e. <strong><em>.github.io</em></strong></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/2620/1*FFgsmzUt4eV_r0MhCxAslw.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>Adding new CNAME DNS record on Cloudflare</figcaption></img></figure><h3 id="ii-setting-up-github-pages-as-a-sub-domain-">ii) Setting up Github Pages as a sub-domain:</h3><p>To have our subpages be listed as demo page we need to do following changes in our GitHub repo and our Domain provider</p><ol><li>Create or Edit an existing <strong>CNAME </strong>file in your repository: I will be doing it via GitHub UI, in my case, there is already a CNAME File so I ‘ll just edit the existing file and replace everything in it with my sub-domain, nothing else. in my case, I want to make <strong>demo </strong>pages appear as <strong><em>demo.kushalbhalaik.xyz</em></strong></li></ol><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/2234/1*FxyNYdcrL9TbOiA7uhYT-g.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>Updated CNAME File Content</figcaption></img></figure><p>Once Done, commit your changes.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/2584/1*Wu67RaNVR96RrX-NYkr0YQ.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>Editing CNAME file in Repository</figcaption></img></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/2184/1*H59ALuDL9jcNg5o9Ll7z1A.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>After Adding CNAME to repo</figcaption></img></figure><p>2. Add a new DNS record on your DNS provider for existing Domain: We need to change existing CNAME records to point to created GitHub pages i.e. <strong><em>.github.io</em></strong></p><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/2092/1*xYlbopBao6uHGWPlScKDEA.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"/></figure><h3 id="important-points-">Important Points:</h3><ul><li>Again, at this point, nothing needs to be done from our end, we need to wait for changes to reflect on both GitHub and Cloudflare end, Which may take some time (usually its prompt) but may take some time based on your DNS provider</li><li>You won’t be able to access your pages via <strong><strong><em><em>&lt;username&gt;.github.io, or &lt;username&gt;.github.io/&lt;your-repo&gt;</em></em></strong><em> </em></strong>in case you try and enter this in browser, you’ll be redirected to your custom domain or custom sub-domain</li><li>Your can-not add multiple GitHub Pages as a sub-doman to <strong>GitHub User Page </strong>i.e <em>demo.far11ven.github.io</em> in my case is not a valid url</li></ul><h3 id="final-result-">Final Result:</h3><p>We have successfully created a sub-domain to host our another github-page, follow these steps to create even more pages within your website.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/1202/1*VptsVQstgH05Bm_OFdfhzQ.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 2)"><figcaption>GitHub pages published under a sub-domain</figcaption></img></figure><p><em>Cheers!!</em></p><p><strong>Original article on</strong>: <a href="https://blog.kushalbhalaik.xyz/github-pages-a-comprehensive-guide-w-images-part-2">https://blog.kushalbhalaik.xyz/github-pages-a-comprehensive-guide-w-images-part-2</a></p></hr>]]></content:encoded></item><item><title><![CDATA[GitHub Pages — A Comprehensive guide w/ images (Part 1)]]></title><description><![CDATA[Recently I started building my personal website as everyone is building for themselves these days. I got a cool TLD (.xyz), and that is]]></description><link>https://admin.kushalbhalaik.xyz/github-pages-a-comprehensive-guide-w-images-part-1/</link><guid isPermaLink="false">Ghost__Post__5e22b9d647638e0001d8292b</guid><category><![CDATA[GitHub]]></category><dc:creator><![CDATA[Kushal Bhalaik]]></dc:creator><pubDate>Sat, 11 Jan 2020 07:54:00 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/01/3.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/01/3.jpg" alt="GitHub Pages — A Comprehensive guide w/ images (Part 1)"/><p/><p>Recently I started building my personal <a href="https://kushalbhalaik.xyz/">website</a> as everyone is building for themselves these days. I got a cool TLD (.xyz), and that is the only money I wanted to spend. Since then I’ve been looking for ways to host it without any costs.</p><hr><p>I’ve tried different host providers such as <a href="http://www.heroku.com/">Heroku</a>, <a href="http://www.000webhost.com/">000webhost</a> so far, which are good options. My website is vastly static pages so far until I figure out how to have a cms such as <a href="http://www.ghost.org/">Ghost</a> to be integrated with <a href="http://www.gatsbyjs.org/">Gatsby</a> for adding content periodically (Of course for free). Anyways I thought if my site is mostly static pages so why not give Github Pages a try (it’s been on my list for a quite sometime now) and along the way I encountered various hurdles and there wasn’t an elaborate article around it. So folks here we are :)</p><p>This is part 1 of this article series, part 2 can be found <a href="https://medium.com/@kushalbhalaik/github-pages-a-comprehensive-guide-w-images-part-2-94c7a6b8d65b">here</a>. <em>Enchanté</em>.</p><h1 id="setting-up-github-pages-">Setting up Github Pages:</h1><p>This is the most straight forward thing, it’s all neatly illustrated here on <a href="https://pages.github.com/">Github Pages</a>, but as this article‘s name suggests I’m bound:</p><p>We’ll start by creating a repository on Github:</p><ol><li>Goto <a href="https://github.com/new/">Github.new</a>, a cooler way to create Github repositories (You’ll see).</li></ol><p>Make sure your repo-name is .github.io The pages ending with <strong>.github.io</strong> are called <strong>User Pages</strong>, where could belong to an individual or an organization</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/1698/1*0Ozb5XoyfFn7DWZspAYuAg.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 1)"><figcaption>Repository creation flow on GitHub</figcaption></img></figure><h3 id="note-it-is-important-to-make-your-repository-public-in-order-for-your-github-user-pages-to-be-accessible-to-all"><em>Note: It is important to make your repository Public, in order for your GitHub User pages to be accessible to all</em><br/></h3><blockquote>We won’t be creating any other branch, because<strong> User Pages</strong> require to be built from master branch. And in this article, we won’t use <strong>Jekyll </strong>to publish our pages.</blockquote><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/1558/1*no0kc3rdol3SWujmpJVKYg.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 1)"/></figure><ol><li>First clone the repo to local machine: Here, <strong><em>&lt;<a href="unsafe:javascript:void(0)">username</a>&gt;</em> is GitHub username</strong></li></ol><pre><code>~$ git clone https://github.com/username/username.github.io.git</code></pre><ol><li>Create an <strong><em>index.html</em></strong> file inside this repository:</li></ol><pre><code>~$ cd username.github.io

~$ echo “Hello World!!” &gt; index.html</code></pre><ol><li>Add, commit and push your changes to Github remote:</li></ol><pre><code>~$ git add *

~$ git commit -m "Initial commit"

~$ git push -u origin master</code></pre><ol><li>Type {<strong><em>&lt;username&gt;.github.io </em></strong>} in browser and you’re done publishing your first website to github pages.</li></ol><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/1022/1*XOuM4EPcUp2T2pOOniPaYw.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 1)"><figcaption>Browser screenshot of deployed Github pages</figcaption></img></figure><hr><h1 id="setting-up-github-pages-on-your-custom-domain-">Setting up Github Pages on your custom-domain:</h1><p>We have successfully created and deployed Github Pages. But I want users to visit my custom domain <em><strong>kushalbhalaik.xyz</strong>. </em>Lets link’em up:</p><ol><li>Created a CNAME file in your repository: I will be doing it via GitHub UI, just create a <strong>CNAME </strong>file (with no extension) and just enter your domain name inside it, nothing else.</li></ol><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/2052/1*pfBeNgjpAmuqIhBOQTgNHg.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 1)"/></figure><p>Once Done, commit your changes.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/2032/1*_M1dh61vJyblyI6DX-m1CA.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 1)"><figcaption>Adding CNAME file to repository</figcaption></img></figure><ol><li>Change DNS records on your DNS provider: We need to change existing CNAME records to point to created github pages i.e. <strong><strong><em><em>&lt;username&gt;.github.io</em></em></strong></strong></li></ol><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/2116/1*RYZ6ZpXYVQmdEgXPqxGXuw.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 1)"><figcaption>Changing CNAME records on Cloudflare</figcaption></img></figure><h2 id="important-points-">Important Points:</h2><ul><li>At this point, nothing needs to be done from our end, we need to wait for changes to reflect on both GitHub and Cloudflare end, Which may take some time (usually its prompt) but may take some time based on your DNS provider</li><li>You won’t be able to access your pages via <strong><em>.github.io, </em></strong>in case you try and enter this in browser, you’ll be redirected to your custom domain</li></ul><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/1022/1*towqw7uQT_WHQ6TPsPsDMg.png" class="kg-image" alt="GitHub Pages — A Comprehensive guide w/ images (Part 1)"><figcaption>Github Page deployed on custom-domain</figcaption></img></figure><p>So this was all to get you started with your very own Github Pages (User). In Part 2 of this series we’ll be taking deeper look into <strong><em>gh-pages</em></strong> and linking pages to your sub-domain.</p><p>Part 2 is now available <a href="https://blog.kushalbhalaik.xyz/github-pages-a-comprehensive-guide-w-images-part-2/">here</a>. <em>Happy Building!!</em></p><p><strong><strong>Original article on</strong></strong>: <a href="https://blog.kushalbhalaik.xyz/github-pages-a-comprehensive-guide-w-images-part-1" rel="noopener nofollow">https://blog.kushalbhalaik.xyz/github-pages-a-comprehensive-guide-w-images-part-1</a></p></hr></hr>]]></content:encoded></item><item><title><![CDATA[Email Templating with EJS (Node + Express + SendGrid)]]></title><description><![CDATA[I’ve been building a social links website 8link, which requires me to interact with my users at different levels. So based on the type of email]]></description><link>https://admin.kushalbhalaik.xyz/email-templating-with-ejs-node-express-sendgrid/</link><guid isPermaLink="false">Ghost__Post__5e22b2f547638e0001d828ca</guid><category><![CDATA[EJS]]></category><category><![CDATA[Node.js]]></category><category><![CDATA[Express.js]]></category><dc:creator><![CDATA[Kushal Bhalaik]]></dc:creator><pubDate>Thu, 26 Dec 2019 07:38:00 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/01/1.jpg" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/01/1.jpg" alt="Email Templating with EJS (Node + Express + SendGrid)"/><p/><p>I’ve been building a social links website <a href="https://www.8link.in/?ref=blog">8link</a>, which requires me to interact with my users at different levels. So based on the type of email interaction with my users, I’ve narrowed it down to the following categories of emails:</p><ol><li>Welcome email (With verify link)</li><li>Password reset link</li><li>Automated response to user queries</li><li>The actual response to User queries</li><li>Occasional promo or newsletters</li></ol><p>I’ve been using a Node.js +Express back-end and I wanted to achieve it with same frame-work. So I started using SendGrid <a href="https://sendgrid.com/solutions/email-api/">Email API</a> to achieve this goal.</p><blockquote>SendGrid already has a Templating service, if you are interested you can check it <a href="https://sendgrid.com/docs/ui/sending-email/how-to-send-an-email-with-dynamic-transactional-templates/">here</a>.</blockquote><p>Back to Templating with EJS, in This article, we’ll see how can we create Re-Usable HTML Templates with EJS and then deliver them with SendGrid.</p><p>We’ll start by creating a simple node project:</p><pre><code>npm init sendgrid-mailer</code></pre><p>Install following dependencies,</p><pre><code>npm i --save express cors ejs</code></pre><p>Our Package.json should look like:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://cdn-images-1.medium.com/max/1792/1*4KnnrY1HX6LCh8S7djHtNw.png" class="kg-image" alt="Email Templating with EJS (Node + Express + SendGrid)"><figcaption>Package.json at this point</figcaption></img></figure><hr><p>Let’s create a simple endpoint to serve our email “/hello”</p><pre><code>Notice //set express view engine to ejs
app.set(“view engine”, “ejs”);</code></pre><!--kg-card-begin: html--><script src="https://gist.github.com/far11ven/28dc098df4e3762f498f2c72741fec0c.js"/><!--kg-card-end: html--><p>it should give us the following response:</p><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/960/1*bX6CnP-NNwnBN1Rxuh6v2w.png" class="kg-image" alt="Email Templating with EJS (Node + Express + SendGrid)"/></figure><p>We are halfway there, Now create a <em>welcome-mail.ejs</em> file in views (Template) folder in the project root directory.</p><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/798/1*0dtPUAeab8tupUAwxjKfLg.png" class="kg-image" alt="Email Templating with EJS (Node + Express + SendGrid)"/></figure><p>Now add some HTML code in there, which will serve as an underlying template for our welcome mail:</p><!--kg-card-begin: html--><script src="https://gist.github.com/far11ven/e161c86d32854892dcaccf946aeb77ec.js"/><!--kg-card-end: html--><p>You will see the following syntax in this HTML, which is used to receive data before rendering it. We are using the following variables for manipulating data:</p><pre><code>//these are EJS expressions to dynamically receive and display data while rendering an HTML

&lt;%= user_firstname %&gt;
&lt;%= confirm_link %&gt;</code></pre><p>Now we need to make changes to our “/hello” endpoint</p><p>We’ll need to import following to our <em>index.js</em> file:</p><pre><code>//imports
const path = require(“path”);
const ejs = require(“ejs”);</code></pre><p>and our “/hello” app route function will change to :</p><pre><code>app.get(“/hello”, (*req*, *res*, *next*) =&gt; {
let emailTemplate;
let capitalizedFirstName = “John”;
let userEmail = “John@example.com”;

ejs
.renderFile(path.join(__dirname, “views/welcome-mail.ejs”),
{
  user_firstname: capitalizedFirstName,
  confirm_link: “http://www.8link.in/confirm=" + userEmail
})
.then(*result* =&gt; {
  emailTemplate = result;
  res.send(emailTemplate);
})
.catch(*err* =&gt; {
  res.status(400).json({
      message: “Error Rendering emailTemplate”,
      error: err
     });
  });

});</code></pre><p>in here, <strong>ejs.renderFile()</strong> take .ejs file path and specify values for <strong><em>user_firstname </em></strong>and <strong><em>confirm_link</em></strong></p><p>Now if we hit “/hello” we get:</p><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/3840/1*Y5Gtffdna1ZO_N3J-X62xQ.png" class="kg-image" alt="Email Templating with EJS (Node + Express + SendGrid)"/></figure><p><strong>Whoops..</strong> we now have our welcome template, we just have to deliver it via email now.</p><hr><h4 id="let-s-integrate-sendgrid-now-">Let's integrate SendGrid now:</h4><p>First signup for SendGrid mail API, by clicking <a href="https://sendgrid.com/docs/API_Reference/api_v3.html">here</a> and get the API -KEY</p><p>Now get @sendgrid/mail package from npm.</p><pre><code>npm i --save @sendgrid/mail</code></pre><p>Import following into <strong>index.js</strong></p><pre><code>const SGmail = require(“@sendgrid/mail”);</code></pre><p>Now in our code first register the SendGrid API Key</p><pre><code>SGmail.setApiKey(process.env.SendGrid_Key);

//Note: store SendGrid_Key in your projects' config file</code></pre><p>and replace <strong>res.send(emailTemplate); </strong>with following code:</p><pre><code>const message = {
  to: userEmail,
  from: { email: “welcome@8link.in”, name: “8link” },
  subject: “Welcome link”,
  html: emailTemplate
};

return SGmail.send(message).then(*sent* =&gt; {

// Awesome Logic to check if mail was sent

   res.status(200).json({
      message: “Welcome mail was sent”

      });

}).catch(*err* =&gt; {

      console.log(“Error sending mail”, err);
      res.status(400).json({
          message: “Welcome mail was not sent”,
          error: err
      });

});</code></pre><p>Our final code should look like:</p><!--kg-card-begin: html--><script src="https://gist.github.com/far11ven/62ec9dcf0c0ed7147ca3f75b55275c21.js"/><!--kg-card-end: html--><p>And if I hit my “/hello” endpoint again, I should see that mail was sent successfully:</p><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/1512/1*V4fQgNhZOtrM7FzSkOEcRQ.png" class="kg-image" alt="Email Templating with EJS (Node + Express + SendGrid)"/></figure><p>Full Code on Github: <a href="https://github.com/far11ven/SendGrid-Mailer">https://github.com/far11ven/SendGrid-Mailer</a></p><p><strong>Original article on</strong>: <a href="https://blog.kushalbhalaik.xyz/email-templating-with-ejs-node-express-sendgrid/" rel="noopener nofollow">https://blog.kushalbhalaik.xyz/email-templating-with-ejs-node-express-sendgrid</a></p></hr></hr>]]></content:encoded></item><item><title><![CDATA[Bootstrap icons — Overview]]></title><description><![CDATA[Bootstrap is a large and complex frontend library which we all fancy having some powerful functionality and customization built-in. Occasionally though, when you]]></description><link>https://admin.kushalbhalaik.xyz/bootstrap-icons-overview/</link><guid isPermaLink="false">Ghost__Post__5e22b71847638e0001d8290d</guid><category><![CDATA[Bootstrap]]></category><category><![CDATA[CSS]]></category><category><![CDATA[HTML]]></category><dc:creator><![CDATA[Kushal Bhalaik]]></dc:creator><pubDate>Wed, 27 Nov 2019 07:46:00 GMT</pubDate><media:content url="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/01/2.png" medium="image"/><content:encoded><![CDATA[<img src="https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/01/2.png" alt="Bootstrap icons — Overview"/><p><a href="https://getbootstrap.com/">Bootstrap</a> is a large and complex frontend library which we all fancy having some powerful functionality and customization built-in. Occasionally though, when you need to have icons in your web projects; you go straight to<a href="https://www.fontawesome.com/"> Font-awesome</a> or <a href="https://getbootstrap.com/docs/3.3/components/">Glyphicons</a> (Bootstrap v3). But developers and designers often felt constricted to the fact that they have to rely on some other third party library for the icons having to pay for icons they desire. This just didn’t seem right for any of us.</p><p>Fast forward 2019, gone are the days when we had to choose between <a href="https://www.fontawesome.com/">Font-awesome</a> or <a href="https://getbootstrap.com/docs/3.3/components/">Glyphicons</a> (Bootstrap v3), For the first time ever, <a href="https://getbootstrap.com/">Bootstrap</a> has its own icon library, custom designed and built for its components… (<code>navbars</code>, <code>button</code>, <code>cards</code>, and more).</p><p>You can Track latest releases on Github <a href="https://github.com/twbs/icons/releases/">here</a>, also you can checkout Bootstrap icons <a href="https://icons.getbootstrap.com/">documentation</a>.</p><hr><h1 id="getting-started">Getting Started</h1><h1 id="with-npm">With npm</h1><pre><code>npm install bootstrap-icons</code></pre><h1 id="download">Download</h1><p>Download the project from <a href="https://github.com/twbs/icons/releases/">here</a>, and from the <code>icons</code> folder and directly copy icons SVGs which you require in your project.</p><h1 id="usage">Usage</h1><p>Choose how you would like to integrate Bootstrap icons in your web application.</p><h1 id="external-image">External image</h1><p>Use directly from the project directory and reference them like normal images with the <code>&lt;img&gt;</code> element.</p><p>Code:</p><pre><code>&lt;img src="/assets/img/bootstrap.svg" width="64" height="64" title="Bootstrap"&gt;</code></pre><p>Preview:</p><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/186/1*rh5okfViVbpCQFAkzzuCxg.png" class="kg-image" alt="Bootstrap icons — Overview"/></figure><h1 id="embedded">Embedded</h1><p>Embed your icons within the HTML of your page (as opposed to an external image file). Here we’ve used a custom width and height.</p><p>Code:</p><pre><code>&lt;svg class="bi bi-chevron-right" width="64" height="64" viewBox="0 0 20 20" fill="currentColor" xmlns="http://www.w3.org/2000/svg"&gt;
      &lt;path fill-rule="evenodd" d="M6.646 3.646a.5.5 0 01.708 0l6 6a.5.5 0 010 .708l-6 6a.5.5 0 01-.708-.708L12.293 10 6.646 4.354a.5.5 0 010-.708z" clip-rule="evenodd"/&gt;
&lt;/svg&gt;</code></pre><p>Preview:</p><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/154/1*YZk5_5XFCm1W9fQ_m998aw.png" class="kg-image" alt="Bootstrap icons — Overview"/></figure><h1 id="as-css">As CSS</h1><p>You can also use the SVG within your CSS (be sure to escape any characters, such as <code>#</code> to <code>%23</code> when specifying hex color values). When no dimensions are specified via width and height on the <code>&lt;svg&gt;</code>, the icon will fill the available space.</p><p>Code:</p><pre><code>               .bi::before {
                              display: inline-block;
                              content: "";
                              background-image: url("data:image/svg+xml,&lt;svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'&gt;&lt;path fill='none' stroke='%23333' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 14l6-6-6-6'/&gt;&lt;/svg&gt;");
                              background-repeat: no-repeat;
                              background-size: 1rem 1rem;
                            }</code></pre><p>Preview:</p><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/184/1*1BMRBpqnP2FacIeCVNVVpg.png" class="kg-image" alt="Bootstrap icons — Overview"/></figure><hr><h1 id="styling">Styling</h1><p>Color can be changed by setting a <code>.text-*</code> class or custom CSS:</p><h1 id="using-bootstrap-css-classes">Using bootstrap css classes</h1><p>Code:</p><pre><code>&lt;svg class="bi bi-alert-triangle text-danger" width="64" height="64" viewBox="0 0 20 20" fill="currentColor" xmlns="http://www.w3.org/2000/svg"&gt;`

 ...

&lt;/svg&gt;</code></pre><p>Preview:</p><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/178/1*Vr2CvOtaOoNgi1Dvo5e_hg.png" class="kg-image" alt="Bootstrap icons — Overview"/></figure><h1 id="using-custom-css-classes">Using custom css classes</h1><p>Code:</p><pre><code>.my-custom-css-class{
                      color:green;
                    }</code></pre><p>Preview:</p><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/174/1*D3E5IizZSrXXmkt3ruScIg.png" class="kg-image" alt="Bootstrap icons — Overview"/></figure><h1 id="using-style-attribute">Using Style Attribute</h1><p>Code:</p><pre><code>style="color:blue;"</code></pre><p>Preview:</p><figure class="kg-card kg-image-card"><img src="https://cdn-images-1.medium.com/max/168/1*C72UxZhVkiRqyLdDQdNl0Q.png" class="kg-image" alt="Bootstrap icons — Overview"/></figure><p><strong>Original article on</strong>: <a href="https://blog.kushalbhalaik.xyz/bootstrap-icons-overview/">https://blog.kushalbhalaik.xyz/bootstrap-icons-overview</a></p></hr></hr>]]></content:encoded></item></channel></rss>