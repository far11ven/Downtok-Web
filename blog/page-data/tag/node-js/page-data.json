{"componentChunkName":"component---src-templates-tag-js","path":"/tag/node-js/","webpackCompilationHash":"076274619e12b3099b35","result":{"data":{"ghostTag":{"slug":"node-js","name":"Node.js","visibility":"public","feature_image":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5e22b2f547638e0001d828ca","title":"Email Templating with EJS (Node + Express + SendGrid)","slug":"email-templating-with-ejs-node-express-sendgrid","featured":true,"feature_image":"https://digitalpress.fra1.cdn.digitaloceanspaces.com/omtmgjm/2020/01/1.jpg","excerpt":"I’ve been building a social links website 8link, which requires me to interact with my users at different levels. So based on the type of email","custom_excerpt":"I’ve been building a social links website 8link, which requires me to interact with my users at different levels. So based on the type of email","created_at_pretty":"18 January, 2020","published_at_pretty":"26 December, 2019","updated_at_pretty":"12 March, 2020","created_at":"2020-01-18T07:25:41.000+00:00","published_at":"2019-12-26T07:38:00.000+00:00","updated_at":"2020-03-12T15:42:56.000+00:00","meta_title":"Email Templating with EJS (Node + Express + SendGrid)","meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Kushal Bhalaik","slug":"kushal","bio":null,"profile_image":null,"twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Kushal Bhalaik","slug":"kushal","bio":null,"profile_image":null,"twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"EJS","slug":"ejs","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"EJS","slug":"ejs","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Node.js","slug":"node-js","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"Express.js","slug":"express-js","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"\n\nI’ve been building a social links website 8link [https://www.8link.in/?ref=blog]\n, which requires me to interact with my users at different levels. So based on\nthe type of email interaction with my users, I’ve narrowed it down to the\nfollowing categories of emails:\n\n 1. Welcome email (With verify link)\n 2. Password reset link\n 3. Automated response to user queries\n 4. The actual response to User queries\n 5. Occasional promo or newsletters\n\nI’ve been using a Node.js +Express back-end and I wanted to achieve it with same\nframe-work. So I started using SendGrid Email API\n[https://sendgrid.com/solutions/email-api/] to achieve this goal.\n\n> SendGrid already has a Templating service, if you are interested you can check\nit here\n[https://sendgrid.com/docs/ui/sending-email/how-to-send-an-email-with-dynamic-transactional-templates/]\n.\nBack to Templating with EJS, in This article, we’ll see how can we create\nRe-Usable HTML Templates with EJS and then deliver them with SendGrid.\n\nWe’ll start by creating a simple node project:\n\nnpm init sendgrid-mailer\n\nInstall following dependencies,\n\nnpm i --save express cors ejs\n\nOur Package.json should look like:\n\nPackage.json at this point\n--------------------------------------------------------------------------------\n\nLet’s create a simple endpoint to serve our email “/hello”\n\nNotice //set express view engine to ejs\napp.set(“view engine”, “ejs”);\n\nit should give us the following response:\n\nWe are halfway there, Now create a welcome-mail.ejs file in views (Template)\nfolder in the project root directory.\n\nNow add some HTML code in there, which will serve as an underlying template for\nour welcome mail:\n\nYou will see the following syntax in this HTML, which is used to receive data\nbefore rendering it. We are using the following variables for manipulating data:\n\n//these are EJS expressions to dynamically receive and display data while rendering an HTML\n\n<%= user_firstname %>\n<%= confirm_link %>\n\nNow we need to make changes to our “/hello” endpoint\n\nWe’ll need to import following to our index.js file:\n\n//imports\nconst path = require(“path”);\nconst ejs = require(“ejs”);\n\nand our “/hello” app route function will change to :\n\napp.get(“/hello”, (*req*, *res*, *next*) => {\nlet emailTemplate;\nlet capitalizedFirstName = “John”;\nlet userEmail = “John@example.com”;\n\nejs\n.renderFile(path.join(__dirname, “views/welcome-mail.ejs”),\n{\n  user_firstname: capitalizedFirstName,\n  confirm_link: “http://www.8link.in/confirm=\" + userEmail\n})\n.then(*result* => {\n  emailTemplate = result;\n  res.send(emailTemplate);\n})\n.catch(*err* => {\n  res.status(400).json({\n      message: “Error Rendering emailTemplate”,\n      error: err\n     });\n  });\n\n});\n\nin here, ejs.renderFile() take .ejs file path and specify values for \nuser_firstname and confirm_link\n\nNow if we hit “/hello” we get:\n\nWhoops.. we now have our welcome template, we just have to deliver it via email\nnow.\n\n\n--------------------------------------------------------------------------------\n\nLet's integrate SendGrid now:\nFirst signup for SendGrid mail API, by clicking here\n[https://sendgrid.com/docs/API_Reference/api_v3.html] and get the API -KEY\n\nNow get @sendgrid/mail package from npm.\n\nnpm i --save @sendgrid/mail\n\nImport following into index.js\n\nconst SGmail = require(“@sendgrid/mail”);\n\nNow in our code first register the SendGrid API Key\n\nSGmail.setApiKey(process.env.SendGrid_Key);\n\n//Note: store SendGrid_Key in your projects' config file\n\nand replace res.send(emailTemplate); with following code:\n\nconst message = {\n  to: userEmail,\n  from: { email: “welcome@8link.in”, name: “8link” },\n  subject: “Welcome link”,\n  html: emailTemplate\n};\n\nreturn SGmail.send(message).then(*sent* => {\n\n// Awesome Logic to check if mail was sent\n\n   res.status(200).json({\n      message: “Welcome mail was sent”\n\n      });\n\n}).catch(*err* => {\n\n      console.log(“Error sending mail”, err);\n      res.status(400).json({\n          message: “Welcome mail was not sent”,\n          error: err\n      });\n\n});\n\nOur final code should look like:\n\nAnd if I hit my “/hello” endpoint again, I should see that mail was sent\nsuccessfully:\n\nFull Code on Github: https://github.com/far11ven/SendGrid-Mailer\n\nOriginal article on: \nhttps://blog.kushalbhalaik.xyz/email-templating-with-ejs-node-express-sendgrid\n[https://blog.kushalbhalaik.xyz/email-templating-with-ejs-node-express-sendgrid/]","html":"<p></p><p>I’ve been building a social links website <a href=\"https://www.8link.in/?ref=blog\">8link</a>, which requires me to interact with my users at different levels. So based on the type of email interaction with my users, I’ve narrowed it down to the following categories of emails:</p><ol><li>Welcome email (With verify link)</li><li>Password reset link</li><li>Automated response to user queries</li><li>The actual response to User queries</li><li>Occasional promo or newsletters</li></ol><p>I’ve been using a Node.js +Express back-end and I wanted to achieve it with same frame-work. So I started using SendGrid <a href=\"https://sendgrid.com/solutions/email-api/\">Email API</a> to achieve this goal.</p><blockquote>SendGrid already has a Templating service, if you are interested you can check it <a href=\"https://sendgrid.com/docs/ui/sending-email/how-to-send-an-email-with-dynamic-transactional-templates/\">here</a>.</blockquote><p>Back to Templating with EJS, in This article, we’ll see how can we create Re-Usable HTML Templates with EJS and then deliver them with SendGrid.</p><p>We’ll start by creating a simple node project:</p><pre><code>npm init sendgrid-mailer</code></pre><p>Install following dependencies,</p><pre><code>npm i --save express cors ejs</code></pre><p>Our Package.json should look like:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://cdn-images-1.medium.com/max/1792/1*4KnnrY1HX6LCh8S7djHtNw.png\" class=\"kg-image\" alt=\"package.json file\"><figcaption>Package.json at this point</figcaption></figure><hr><p>Let’s create a simple endpoint to serve our email “/hello”</p><pre><code>Notice //set express view engine to ejs\napp.set(“view engine”, “ejs”);</code></pre><!--kg-card-begin: html--><script src=\"https://gist.github.com/far11ven/28dc098df4e3762f498f2c72741fec0c.js\"></script><!--kg-card-end: html--><p>it should give us the following response:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://cdn-images-1.medium.com/max/960/1*bX6CnP-NNwnBN1Rxuh6v2w.png\" class=\"kg-image\" alt=\"/hello on localhost\"></figure><p>We are halfway there, Now create a <em>welcome-mail.ejs</em> file in views (Template) folder in the project root directory.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://cdn-images-1.medium.com/max/798/1*0dtPUAeab8tupUAwxjKfLg.png\" class=\"kg-image\"></figure><p>Now add some HTML code in there, which will serve as an underlying template for our welcome mail:</p><!--kg-card-begin: html--><script src=\"https://gist.github.com/far11ven/e161c86d32854892dcaccf946aeb77ec.js\"></script><!--kg-card-end: html--><p>You will see the following syntax in this HTML, which is used to receive data before rendering it. We are using the following variables for manipulating data:</p><pre><code>//these are EJS expressions to dynamically receive and display data while rendering an HTML\n\n&lt;%= user_firstname %&gt;\n&lt;%= confirm_link %&gt;</code></pre><p>Now we need to make changes to our “/hello” endpoint</p><p>We’ll need to import following to our <em>index.js</em> file:</p><pre><code>//imports\nconst path = require(“path”);\nconst ejs = require(“ejs”);</code></pre><p>and our “/hello” app route function will change to :</p><pre><code>app.get(“/hello”, (*req*, *res*, *next*) =&gt; {\nlet emailTemplate;\nlet capitalizedFirstName = “John”;\nlet userEmail = “John@example.com”;\n\nejs\n.renderFile(path.join(__dirname, “views/welcome-mail.ejs”),\n{\n  user_firstname: capitalizedFirstName,\n  confirm_link: “http://www.8link.in/confirm=\" + userEmail\n})\n.then(*result* =&gt; {\n  emailTemplate = result;\n  res.send(emailTemplate);\n})\n.catch(*err* =&gt; {\n  res.status(400).json({\n      message: “Error Rendering emailTemplate”,\n      error: err\n     });\n  });\n\n});</code></pre><p>in here, <strong>ejs.renderFile()</strong> take .ejs file path and specify values for <strong><em>user_firstname </em></strong>and <strong><em>confirm_link</em></strong></p><p>Now if we hit “/hello” we get:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://cdn-images-1.medium.com/max/3840/1*Y5Gtffdna1ZO_N3J-X62xQ.png\" class=\"kg-image\"></figure><p><strong>Whoops..</strong> we now have our welcome template, we just have to deliver it via email now.</p><hr><h4 id=\"let-s-integrate-sendgrid-now-\">Let's integrate SendGrid now:</h4><p>First signup for SendGrid mail API, by clicking <a href=\"https://sendgrid.com/docs/API_Reference/api_v3.html\">here</a> and get the API -KEY</p><p>Now get @sendgrid/mail package from npm.</p><pre><code>npm i --save @sendgrid/mail</code></pre><p>Import following into <strong>index.js</strong></p><pre><code>const SGmail = require(“@sendgrid/mail”);</code></pre><p>Now in our code first register the SendGrid API Key</p><pre><code>SGmail.setApiKey(process.env.SendGrid_Key);\n\n//Note: store SendGrid_Key in your projects' config file</code></pre><p>and replace <strong>res.send(emailTemplate); </strong>with following code:</p><pre><code>const message = {\n  to: userEmail,\n  from: { email: “welcome@8link.in”, name: “8link” },\n  subject: “Welcome link”,\n  html: emailTemplate\n};\n\nreturn SGmail.send(message).then(*sent* =&gt; {\n\n// Awesome Logic to check if mail was sent\n\n   res.status(200).json({\n      message: “Welcome mail was sent”\n\n      });\n\n}).catch(*err* =&gt; {\n\n      console.log(“Error sending mail”, err);\n      res.status(400).json({\n          message: “Welcome mail was not sent”,\n          error: err\n      });\n\n});</code></pre><p>Our final code should look like:</p><!--kg-card-begin: html--><script src=\"https://gist.github.com/far11ven/62ec9dcf0c0ed7147ca3f75b55275c21.js\"></script><!--kg-card-end: html--><p>And if I hit my “/hello” endpoint again, I should see that mail was sent successfully:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://cdn-images-1.medium.com/max/1512/1*V4fQgNhZOtrM7FzSkOEcRQ.png\" class=\"kg-image\"></figure><p>Full Code on Github: <a href=\"https://github.com/far11ven/SendGrid-Mailer\">https://github.com/far11ven/SendGrid-Mailer</a></p><p><strong>Original article on</strong>: <a href=\"https://blog.kushalbhalaik.xyz/email-templating-with-ejs-node-express-sendgrid/\" rel=\"noopener nofollow\">https://blog.kushalbhalaik.xyz/email-templating-with-ejs-node-express-sendgrid</a></p>","url":"https://admin.kushalbhalaik.xyz/email-templating-with-ejs-node-express-sendgrid/","uuid":"b1ea6ec3-a2ac-4c48-9521-91816b4acb80","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e22b2f547638e0001d828ca"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"node-js","limit":5,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}}